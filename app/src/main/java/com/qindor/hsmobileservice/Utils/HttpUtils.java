package com.qindor.hsmobileservice.Utils;import android.content.Context;import android.content.Intent;import com.qindor.hsmobileservice.Model.BaseModel;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.HttpConnectionParams;import org.apache.http.util.EntityUtils;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import okhttp3.FormBody;;;public class HttpUtils {    private String resultData;    private Intent intent = new Intent();    private String sKey,sSign;    public Intent getIntent() {        return intent;    }    public String baseHttp(final Context context, BaseModel base,String myinterface, Map map)    {        HttpClient httpClient = new DefaultHttpClient();        HttpPost httpPost = new HttpPost( "http://"+base.getIp()+":"+base.getPort()+"/handheld_device/"+ myinterface);        try {            JSONObject param = new JSONObject();            Iterator<Map.Entry<String, Object>> entries = map.entrySet().iterator();            while (entries.hasNext()) {                Map.Entry<String, Object> entry = entries.next();               // System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());                param.put( entry.getKey(),entry.getValue());//传递键值对参数            }            StringEntity se = new StringEntity(param.toString(), "utf-8");            httpPost.setEntity(se);            // 设置连接超时、读取超时            httpClient.getParams().setIntParameter(                    HttpConnectionParams.SO_TIMEOUT, 5000); // 超时设置            httpClient.getParams().setIntParameter(                    HttpConnectionParams.CONNECTION_TIMEOUT, 5000);// 连接超时            HttpResponse httpResponse = httpClient.execute(httpPost);            resultData = EntityUtils.toString(httpResponse.getEntity());        }catch (Exception e)        {            //Toast.makeText(context,"服务器连接失败！",Toast.LENGTH_SHORT).show();            JSONObject jsonObject =new JSONObject();            try {                jsonObject.put("msg","服务器连接失败");            } catch (JSONException e1) {                e1.printStackTrace();            }            String s = jsonObject.toString();            return s;        }        return resultData;    }    public FormBody.Builder baseOkHttp(BaseModel baseModel, String user, String sKey,Map map){        FormBody.Builder formBody = new FormBody.Builder();//创建表单请求体        JSONObject param = new JSONObject();        Iterator<Map.Entry<String, Object>> entries = map.entrySet().iterator();        while (entries.hasNext()) {            Map.Entry<String, Object> entry = entries.next();            // System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());            //formBody.add( entry.getKey(),entry.getValue().toString());            try {                param.put( entry.getKey(),entry.getValue());//传递键值对参数            } catch (JSONException e) {                e.printStackTrace();            }        }        Map<String, String> params = new HashMap<String, String>();        params.put("proc","spring");        params.put("smsg",param.toString());        params.put("userid",user);        String sign = SignUtils.sign(params,null, sKey);        formBody.add("proc","spring");        formBody.add("sign",sign);        formBody.add("smsg",param.toString());        formBody.add("userid",user);        return formBody;    }}